/********************************************************************
 *
 * $id$
 * ALU8 : 8 bit ALU capable of performing arithmetic and logic operatopns on 8 bit numbers
 * Version : 1.0 
 *
 * Author(s) : Team8 : Vedant (CS19B074), Sanchit(CS19B071) and Parth(CS19B065)
 * Created :
 * Last Modified :
 *
 * Bugs :
 ***************************************************************************/ 

CHIP ALU8 {
    IN x[8], y[8], signed, opcode[3];
    OUT out[8], of, eq;

    PARTS:
    //Logical Unit
    And8(a=x, b=y, out=xANDy);

    Or8(a=x, b=y, out=xORy);

    Xor8(a=x, b=y, out=xXORy);
    Or8Way(in=xXORy, out=noteq);
    Not(in=noteq, out=eq); //determination of equality bit based on results of xor operations

    //Arithmetic unit
    Adder8(x=x, y=y, signed=signed, oper=false, sum=xPLUSy, cy=cyADD, of=ofADD);

    Adder8(x=x, y=y, signed=signed, oper=true, sum=xMINUSy, cy=cySUB, of=ofSUB);

    UnsignedIntegerMultiplier8(x=x, y=y, out=xUMULy, of=ofUMUL);

    SignedIntegerMultiplier8(x=x, y=y, out=xIMULy, of=ofIMUL);
    
    //multiplexer unit that processes the opcode and assigns the output bits and overflow bits
    Mux8bit4to1(in0=false, in1=xANDy, in2=xORy, in3=xXORy, s=opcode[0..1], out=outLogical); //output of logical unit
    Mux8bit4to1(in0=xPLUSy, in1=xMINUSy, in2=xUMULy, in3=xIMULy, s=opcode[0..1], out=outArithmetic); //output of arithmetic unit
    Mux4to1(in0=ofADD, in1=ofSUB, in2=ofUMUL, in3=ofIMUL, s=opcode[0..1], out=ofArithmetic); //overflow in case of arithmetic unit

    Mux8bit2to1(in0=outLogical, in1=outArithmetic, s=opcode[2..2], out=out); //most signinficant bit determines selection of logical or arithmetic units
    Mux2to1(in0=false, in1=ofArithmetic, s=opcode[2..2], out=of); //final overflow detection
    

    
    

}